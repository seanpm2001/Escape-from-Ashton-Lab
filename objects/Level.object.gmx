<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the level 
script_execute(scr_loadgame);
//sanity check
global.invincible = false;
blade_counter = 0;
blade_threshold = 400;
fading = false;

// Resize
room_width = (CELL_WIDTH/16) * 720; 
room_height = (CELL_HEIGHT/16) * 720; 
theTimer = 20;
roomCleared = false;

global.enemies = 0;
//Set grid width and height
//width of the grid is the exact number of cells that fit in the room, same for height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

//Create the grid
grid = ds_grid_create(width, height); 

//Create the pathfinding grid
grid_path = mp_grid_create(0, 0, width, height, CELL_WIDTH, CELL_HEIGHT);



//Fill the grid with the void 
//Subtracting 1 from width and height because of grid indices.
ds_grid_set_region(grid, 0, 0, width -1, height -1, VOID);

// Randomize the world
randomize();

// Create the controller in the center of the grid. div 2 returns whole number. 
var cx = width div 2;
var cy = height div 2;

//Create the player
player = instance_create(cx*CELL_WIDTH+CELL_WIDTH/2, cy*CELL_HEIGHT+CELL_HEIGHT/2, Player);
//obj_camera.x = player.x;
//obj_camera.y = player.y;


// Give the controller a random direction
// Choose random integer between 0 - 3.  
var cdir = irandom(3); 

//The odds variable for changing direction
var odds = 1; 

//Create the level using 1000 steps. 
//Changed from tutorial to create our own levels. 
var x_dir = 0; 
var y_dir = 0;

for(var i = 0; i &lt; width -1; i++){
    for(var j = 0; j &lt;height-1 ; j++){
        ds_grid_set(grid, i, j, FLOOR);
    }
}

//Add walls
//Surround floor tiles with wall as long as there is not another floor. 
for (var yy = 1; yy &lt; height-1; yy++){
    for(var xx = 1; xx &lt; width - 1; xx++){
        if(grid[# xx, yy] == FLOOR){
            //Check for walls
            if(grid[# xx+1, yy] != FLOOR){
                grid[# xx+1, yy] = WALL;            
            }
            if(grid[# xx-1, yy] != FLOOR){
                grid[# xx-1, yy] = WALL;
            }
            if(grid[# xx, yy+1] != FLOOR){
                grid[# xx, yy+1] = WALL;
            }
            if(grid[# xx, yy-1] != FLOOR){
                grid[# xx, yy-1] = WALL;
            }
        }
    }
}
//Check for double walls
for (var yy = 1; yy &lt; height-1; yy++){
    for(var xx = 1; xx &lt; width - 1; xx++){
        if(grid[# xx, yy] == WALL &amp;&amp; grid[# xx+1, yy] == FLOOR &amp;&amp; grid[# xx-1, yy] == FLOOR &amp;&amp; grid[# xx, yy+1] == FLOOR &amp;&amp; grid[# xx, yy-1] == FLOOR){
            grid[# xx, yy] = FLOOR;           
        }
    }
}
//Draw the level using the grid
for (var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        if(grid[# xx, yy] == FLOOR){
            //Draw the floor
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            
            //Add some enemies 
            //var odds = 20; 
            var ex = xx*CELL_WIDTH+CELL_WIDTH/2; 
            var ey = yy*CELL_HEIGHT+CELL_HEIGHT/2;
            if(point_distance(ex, ey, Player.x, Player.y) &gt; 80 &amp;&amp; irandom(global.enemyodds) == global.enemyodds){
                //One in 10 chance to create enemy 80 spots away from player
                instance_create(ex, ey, Enemy);
                global.enemies += 1;
                
            }
            if(global.progression &gt; 3){
                if(point_distance(ex, ey, Player.x, Player.y) &gt; 80 &amp;&amp; irandom(300) == 300){
                    //One in 10 chance to create enemy 80 spots away from player
                    instance_create(ex, ey, Boss);
                    global.enemies += 1;
                    
                }
            }
            } else {
                mp_grid_add_cell(grid_path, xx, yy);
            }
        
    }
}
//Adding pretty tiles
// Get tile sizes
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// Add the tiles
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty, -ty);
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty, -ty);
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty, -ty-tw);
                } else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty, -ty-tw);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty, -ty-tw);
                }
            }
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End the room on clear wave
global.invincible = false;
room_restart();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Restart level if enemies = 0; 

//Check if past X level before shurikens 
blade_counter++;

if((global.progression % 2 == 1)&amp;&amp; (blade_counter &gt; (blade_threshold + irandom_range(-30, 150)))){
    if(irandom(1) == 1){
        throw_blades("right");
    } else {
        throw_blades("left");
    }
    blade_counter = 0;
}

max_l = 44; 
if (irandom(200) == 200 &amp;&amp; (global.enemies &lt; 15) &amp;&amp; false){
    if(irandom(2) == 1){
     instance_create(0, 0, Enemy);
     instance_create(max_l , 0, Enemy);
            
    } else {
      instance_create(0, max_l, Enemy);
      instance_create(max_l, max_l, Enemy);
    }
    global.enemies += 2;
}

if (global.enemies == 0 &amp;&amp; !fading){
    draw_text(Player.x, Player.y, "ROOM CLEARED! Continuing in " + string(theTimer));
    global.enemyspeed += 0.1;
    global.boss += 1;
    global.progression +=1;
        //if(global.enemyodds &lt; 5){
          //  global.enemyodds -= 1;
        //}
    global.enemyhp += irandom(1);
    alarm[0] = 150;
    instance_create(x,y,obj_newlevel);
    audio_play_sound(snd_win, 1, false);
    global.invincible = true;
    fading = true;
    scr_savegame();
    obj_fadeout.fade_out = true;
    //room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy/Clean up the rooms
scr_savegame();
ds_grid_destroy(grid);
mp_grid_destroy(grid_path);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
